output$barchart <-
renderPlotly({
if(vartype == 'asr'){
baseplot <- ggplot(dplyr::mutate(LHDdata,
SEXP = factor(SEXP,
levels = 1:3,
labels = SexLookup),
SEXP = forcats::fct_rev(SEXP)),
aes(y = Value,
ymin = lci,
ymax = uci,
x = LHD,
fill = SEXP,
text = paste(
'Name:', LHD,
"<br>Sex:", SEXP,
"<br>ASR [95% CI]:", Value_Label))) +
scale_y_continuous(paste0(Input_Legend,
"\n(ASR by 10,000 population)"))
}
else if(vartype == 'pct')
{
baseplot <- ggplot(dplyr::mutate(LHDdata,
SEXP = factor(SEXP,
levels = 1:3,
labels = SexLookup),
SEXP = forcats::fct_rev(SEXP)),
aes(x = LHD,
y = Value,
fill = SEXP,
text = paste(
"Name:", LHD,
"<br>Sex:", SEXP,
"<br>Proportion:",
scales::percent(Value,
accuracy = 0.1)))) +
scale_y_continuous(stringr::str_wrap(paste0(Input_Legend, "(%)"),
width = 20),
labels = scales::percent)
}
else if(vartype == 'num')
{
baseplot <- ggplot(dplyr::mutate(LHDdata,
SEXP = factor(SEXP,
levels = 1:3,
labels = SexLookup),
SEXP = forcats::fct_rev(SEXP)),
aes(y = Value,
x = LHD,
fill = SEXP,
text = paste(
'Name:', Name,
"<br>Sex:", SEXP,
"<br>Count:", scales::comma(Value,
accuracy = 1)))) +
scale_y_continuous(stringr::str_wrap(paste(
input$Type,
ifelse(grepl('Age', input$Type), "(Years)", "(N)")),
width = 20),
labels = scales::comma)
}
else if(vartype == 'money')
{
baseplot <- ggplot(dplyr::mutate(LHDdata,
SEXP = factor(SEXP,
levels = 1:3,
labels = SexLookup),
SEXP = forcats::fct_rev(SEXP)),
aes(y = Value,
x = LHD,
fill = SEXP,
text = paste(
'Name:', Name,
"<br>Sex:", SEXP,
"<br>Count:", scales::comma(Value,
accuracy = 1)))) +
scale_y_continuous(stringr::str_wrap(paste(input$Type, "($)"),
width = 20),
labels = scales::comma)
}
else if(vartype == 'seifa')
{
baseplot <- ggplot(dplyr::mutate(LHDdata,
SEXP = factor(SEXP,
levels = 1:3,
labels = SexLookup),
SEXP = forcats::fct_rev(SEXP)),
aes(y = Value,
x = LHD,
fill = TIME_PERIOD,
text = paste('Name:', Name,
'<br>Year:', TIME_PERIOD,
"<br>Proportion:", scales::percent(Value)))) +
scale_y_continuous(paste0(
stringr::str_wrap(gsub('(Index of | \\(.*)', '', input$Type), width = 30),
"\n(% in highest two quintiles)"),
labels = scales::percent)
}
baseplot <- baseplot +
geom_col(position = position_dodge(width = 0.8),
width = 0.8,
colour = 'grey60') +
scale_fill_brewer(NULL,
palette = 'Blues',
direction = -1,
breaks = rev) +
scale_x_discrete("Local Health District") +
theme_minimal() +
theme(axis.text.x = element_text(angle = textangle,
hjust = 1),
text = element_text(size = textsize))
plotly::ggplotly(baseplot,
tooltip = c('text'))
})
##### Render the Leaflet
if(vartype == 'asr'){
leafletProxy(mapId = "map",
data = SA2Map) %>%
clearGroup(unname(AllVars)) %>%
clearControls() %>%
addPolygons(weight = 1,
color = 'grey',
smoothFactor = 0.3,
fillOpacity = 1,
group = 'Total',
fillColor = ~pal(Value_Cat),
options = pathOptions(pane = "Maps"),
label = ~lapply(glue::glue(
.sep = "<br/>",
"<b>{sa2_name}</b>",
"Gender: {input$Sex}",
"{Input_Legend}: {ifelse(is.na(Value), 'Insufficient data', Value_Label)}"),
htmltools::HTML)) %>%
addLegend(title = stringr::str_wrap(gsub("(\\(.*)|( with core.*)", "",
Input_Legend), width = 30),
pal = pal,
position = 'bottomleft',
group = 'Total',
values = ~Value_Cat,
na.label = "N/A",
opacity = 1.0)
} else if(vartype == "pct") {
leafletProxy(mapId = "map",
data = SA2Map) %>%
clearGroup(unname(AllVars)) %>%
clearControls() %>%
addPolygons(weight = 1,
color = 'grey',
smoothFactor = 0.3,
fillOpacity = 1,
group = 'Total',
fillColor = ~pal(Value_Cat),
options = pathOptions(pane = "Maps"),
label = ~lapply(glue::glue(
.sep = "<br/>",
"<b>{sa2_name}</b>",
"Gender: {input$Sex}",
"{Input_Legend}: {ifelse(is.na(Value), 'Insufficient data', scales::percent(Value, a = 0.1))}"),
htmltools::HTML)) %>%
addLegend(title = stringr::str_wrap(paste(Input_Legend, "(%)"),
width = 30),
pal = pal,
position = 'bottomleft',
group = 'Total',
values = ~Value_Cat,
na.label = "N/A",
opacity = 1.0)
} else if(vartype == "num") {
leafletProxy(mapId = "map",
data = SA2Map) %>%
clearGroup(unname(AllVars)) %>%
clearControls() %>%
addPolygons(weight = 1,
color = 'grey',
smoothFactor = 0.3,
fillOpacity = 1,
group = 'Total',
fillColor = ~pal(Value_Cat),
options = pathOptions(pane = "Maps"),
label = ~lapply(glue::glue(
.sep = "<br/>",
"<b>{sa2_name}</b>",
"Gender: {input$Sex}",
"{Input_Legend}: {ifelse(is.na(Value), 'Insufficient data', scales::comma(Value))}"),
htmltools::HTML)) %>%
addLegend(title = stringr::str_wrap(Input_Legend,
width = 30),
pal = pal,
position = 'bottomleft',
group = 'Total',
values = ~Value_Cat,
na.label = "N/A",
opacity = 1.0)
} else if(vartype == "money") {
leafletProxy(mapId = "map",
data = SA2Map) %>%
clearGroup(unname(AllVars)) %>%
clearControls() %>%
addPolygons(weight = 1,
color = 'grey',
smoothFactor = 0.3,
fillOpacity = 1,
group = 'Total',
fillColor = ~pal(Value_Cat),
options = pathOptions(pane = "Maps"),
label = ~lapply(glue::glue(
.sep = "<br/>",
"<b>{sa2_name}</b>",
"Gender: {input$Sex}",
"{Input_Legend}: {ifelse(is.na(Value), 'Insufficient data', scales::dollar(Value))}"),
htmltools::HTML)) %>%
addLegend(title = stringr::str_wrap(paste(Input_Legend, "($)"),
width = 30),
pal = pal,
position = 'bottomleft',
group = 'Total',
values = ~Value_Cat,
na.label = "N/A",
opacity = 1.0)
} else if(vartype == "seifa") {
leafletProxy(mapId = "map",
data = SA2Map) %>%
clearGroup(unname(AllVars)) %>%
clearControls() %>%
addPolygons(weight = 1,
color = 'grey',
smoothFactor = 0.3,
fillOpacity = 1,
group = 'Total',
fillColor = ~pal(Value_Cat),
options = pathOptions(pane = "Maps"),
label = ~lapply(glue::glue(
.sep = "<br/>",
"<b>{sa2_name}</b>",
"Year: {input$Year}",
"{Input_Legend} Decile: {ifelse(is.na(Value), 'Insufficient data', Value_Label)}"),
htmltools::HTML)) %>%
addLegend(title = stringr::str_wrap(Input_Legend,
width = 30),
pal = pal,
position = 'bottomleft',
group = 'Total',
values = ~Value_Cat,
na.label = "N/A",
opacity = 1.0)
}
})
}
shinyApp(ui = dashboardPage(header, sidebar, body), server = server)
library(tidyverse)
todays_date <- Sys.Date()
TimeToPayOff <- function(initial, repayment, rate, date){
amt <- initial
n <- 1
while(amt > 0){
amt <- amt * (1 + rate/52) - repayment
n <- n + 1
}
wks <- 7 * n
cat("You'll be paid off by ",
format(date + wks, '%M %Y'))
}
TimeToPayOff <- function(initial, repayment,
rate,
start_date = Sys.Date()){
amt <- initial
n <- 1
while(amt > 0){
amt <- amt * (1 + rate/52) - repayment
n <- n + 1
}
wks <- 7 * n
cat("You'll be paid off by ",
format(date + wks, '%M %Y'))
}
TimeToPayOff(3e5,
500,
0.06)
library(epitools)
initial = 3e5
repayment = 500
rate = 0.06
amt <- initial
n <- 1
while(amt > 0){
amt <- amt * (1 + rate/52) - repayment
n <- n + 1
}
wks <- 7 * n
date
start_date + wks
start_date = Sys.Date()
start_date + wks
cat("You'll be paid off by ",
format(start_date + wks, '%M %Y'))
cat("You'll be paid off by ",
format(start_date + wks, '%B %Y'))
paste0("You'll be paid off by ",
format(start_date + wks, '%B %Y'))
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'))
start_date + wks
wks/52
wks
wks/365.25
round(wks/365.25)
round(wks/365.25, digits = 1)
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'),
'\n',
'Around',
round(wks/365.25, digits = 1),
'years')
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'),
'\nAround',
round(wks/365.25, digits = 1),
'years')
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'), ',',
'\nAround',
round(wks/365.25, digits = 1),
'years')
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'), '-'
'\nAround',
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'), '-',
'\nAround',
round(wks/365.25, digits = 1),
'years')
library(tidyverse)
TimeToPayOff <- function(initial, repayment,
rate,
start_date = Sys.Date()){
amt <- initial
n <- 1
while(amt > 0){
amt <- amt * (1 + rate/52) - repayment
n <- n + 1
}
wks <- 7 * n
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'), '-',
'\nAround',
round(wks/365.25, digits = 1),
'years')
}
TimeToPayOff(initial = 3e5,
repayment = 500,
rate = 0.06)
TimeToPayOff(initial = 3e5,
repayment = 700,
rate = 0.06)
TimeToPayOff(initial = 350000,
repayment = 700,
rate = 0.06)
matrix(initial)
amt <- matrix(initial)
n <- 1
while(amt > 0){
n <- n + 1
amt[n, 1] <- amt * (1 + rate/52) - repayment
}
amt
amt[n, 1]
amt
n
append(amt, amt * (1 + rate/52) - repayment)
rbind(amt, amt * (1 + rate/52) - repayment)
amt <- matrix(initial)
n <- 1
while(amt > 0){
n <- n + 1
amt <- rbind(amt, amt * (1 + rate/52) - repayment)
}
amt <- matrix(initial)
n <- 1
amt[n, 1]
while(amt[n, 1] > 0){
n <- n + 1
amt <- rbind(amt, amt * (1 + rate/52) - repayment)
}
head(amt)
amt[n]
amt <- matrix(initial)
n <- 1
while(amt[n, 1] > 0){
n <- n + 1
amt <- rbind(amt, amt[n, 1] * (1 + rate/52) - repayment)
}
amt <- matrix(initial)
n <- 1
while(amt[n, 1] > 0){
amt <- rbind(amt, amt[n, 1] * (1 + rate/52) - repayment)
n <- n + 1
}
plot(amt)
amt
amt <- c(initial)
n <- 1
while(amt[n] > 0){
amt <- c(amt, amt[n] * (1 + rate/52) - repayment)
n <- n + 1
}
wks
n
end_date <- start_date + wks
end_date
data.frame(date = seq(start_date, end_date, 7))
data.frame(date = seq(start_date, end_date, 7),
amount = amt)
seq(start_date, end_date, 7) %>%
head()
data.frame(date = seq(start_date, end_date - 7, 7),
amount = amt)
data.frame(date = seq(start_date, end_date - 7, 7),
amount = amt) %>%
ggplot(aes(x = date, y = amount)) +
geom_line()
data.frame(date = seq(start_date, end_date - 7, 7),
amount = amt) %>%
ggplot(aes(x = date, y = amount)) +
geom_line() +
scale_y_continuous('Amount to pay', labels = scales::dollar)
data.frame(date = seq(start_date, end_date - 7, 7),
amount = amt) %>%
ggplot(aes(x = date, y = amount)) +
geom_line() +
scale_y_continuous('Amount to pay', labels = scales::dollar) +
scale_x_date()
data.frame(date = seq(start_date, end_date - 7, 7),
amount = amt) %>%
ggplot(aes(x = date, y = amount)) +
geom_line() +
scale_y_continuous('Amount to pay', labels = scales::dollar) +
scale_x_date('Date')
data.frame(date = seq(start_date, end_date - 7, 7),
amount = amt) %>%
ggplot(aes(x = date, y = amount)) +
geom_line() +
scale_y_continuous('Amount to pay', labels = scales::dollar) +
scale_x_date('Date') +
theme_minimal()
TimeToPayOff <- function(initial, repayment,
rate,
start_date = Sys.Date()){
amt <- c(initial)
n <- 1
while(amt[n] > 0){
amt <- c(amt, amt[n] * (1 + rate/52) - repayment)
n <- n + 1
}
wks <- 7 * n
end_date <- start_date + wks
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'), '-',
'\nAround',
round(wks/365.25, digits = 1),
'years')
data.frame(date = seq(start_date, end_date - 7, 7),
amount = amt) %>%
ggplot(aes(x = date, y = amount)) +
geom_line() +
scale_y_continuous('Amount to pay', labels = scales::dollar) +
scale_x_date('Date') +
theme_minimal()
}
TimeToPayOff(initial = 350000,
repayment = 700,
rate = 0.06)
TimeToPayOff(initial = 350000,
repayment = 700,
rate = 0.06)
TimeToPayOff(initial = 350000,
repayment = 700,
rate = 0.06)
library(tidyverse)
TimeToPayOff <- function(initial,
weekly_repayment,
rate,
start_date = Sys.Date()){
amt <- c(initial)
n <- 1
while(amt[n] > 0){
amt <- c(amt, amt[n] * (1 + rate/52) - repayment)
n <- n + 1
}
wks <- 7 * n
end_date <- start_date + wks
cat("You'll be paid off by",
format(start_date + wks, '%B %Y'), '-',
'\nAround',
round(wks/365.25, digits = 1),
'years')
data.frame(date = seq(start_date, end_date - 7, 7),
amount = amt) %>%
ggplot(aes(x = date, y = amount)) +
geom_line() +
scale_y_continuous('Amount to pay', labels = scales::dollar) +
scale_x_date('Date') +
theme_minimal()
}
TimeToPayOff(initial = 350000,
weekly_repayment = 700,
rate = 0.06)
TimeToPayOff(initial = 300000,
weekly_repayment = 600,
rate = 0.06)
TimeToPayOff(initial = 350000,
weekly_repayment = 700,
rate = 0.06)
